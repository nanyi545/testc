apply plugin: 'com.android.application'
apply plugin: 'com.hehe.gplugin1'



android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"
    defaultConfig {
        applicationId "com.example.testc2"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters 'armeabi-v7a'
            }
        }
//        ndk {
//            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//        }
        ndk {
            abiFilters 'armeabi-v7a'
        }
        // abiFilters  --->   app/.cxx/cmake/debug/armeabi-v7a
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    sourceSets {
        main {
            java {
//                exclude '**/uncompilable/**'
            }
        }
    }

}
repositories {
    flatDir {
        dirs "${project(':app').projectDir}/testlibs"
    }

    /**
     *  flatDir { dirs 'libs', 'liba'}   ---->  folder path:    app/libs   app/liba
     *
     */
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'

//    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation rootProject.ext.dependencies.constraintLayout

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation 'com.iqiyi.xcrash:xcrash-android-lib:3.0.0'

//    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation rootProject.ext.dependencies.recyclerview

    implementation "org.java-websocket:Java-WebSocket:1.4.0"

    // use local aar file  ----> as specified in  repositories/flatDir....
    implementation(name: 'app-debug', ext: 'aar')
//    implementation(name: 'lib1modifier-debug', ext: 'aar')


    // use local aar ... method 1
//    implementation(name: 'lib1-debug', ext: 'aar')
    // method2 -----> publish .. then use ....
    implementation ('com.example.lib1:exampleLib1:1.0.0@aar'){
    }


    implementation "androidx.camera:camera-core:1.0.0-alpha05"
    implementation "androidx.camera:camera-camera2:1.0.0-alpha05"


//    implementation 'com.hehe.gplugin1:myGradlePlugin1:1.0.0'


}





// ---------- gradle tests  ----------

class MyTask extends DefaultTask {

    @Input
    // optional 非必须，
    @Optional
    String from

    @OutputFile
    @Optional
    File out

    @TaskAction
    void func1() {
        println "MyTask func1"
        println from
        println out //  /Users/weiwang/AndroidStudioProjects/TestC2/app/test.txt
        println inputs.files.singleFile  //   /Users/weiwang/AndroidStudioProjects/TestC2/app/build.gradle


        // copy file to an output file ....
        def file = out
        file.createNewFile()
        file.text = inputs.files.singleFile.text
    }
}

task myTask(type:MyTask) {
    // specify group
    group = "wwgroup"
    from = "a/b/c"
    out = file("test.txt")

    inputs.file file("build.gradle")
    outputs.file file("test2.txt")

}


// 自定义任务，zip打包
task mzip(type:Zip){
    group = "wwgroup"
    archiveName "outputs.zip"
    destinationDir file("${buildDir}/costum")
    from "${buildDir}/outputs"   // build/outputs folder  ---> zip this folder
}


afterEvaluate {
    println "-------afterEvaluate------"
    println tasks.getByName("packageDebug")
}


task printExt {
    group 'wwgroup'
    doLast {
        println 'ext.dependencies:'+rootProject.ext.dependencies
        rootProject.ext.dependencies.each {
            key, val -> println key+" - "+val
        }
    }
}


task printRepos() {
    doLast {
        for (ArtifactRepository repository : project.repositories.asList()) {
            println("reponame:" + repository.getName() + "  url:" + repository.properties.get('url')+"   repo type:"+repository.getClass().getName())
            if(repository instanceof org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository ) {
                org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository mavenRepo = (org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository)repository;
                println("artifactUrls:"+mavenRepo.artifactUrls)
                println("url:"+mavenRepo.url)
            }
        }
    }
}


/**
 * https://toutiao.io/posts/9s60s9/preview
 *
 * 对于release版本的依赖，其实很简单，拼接依赖的path路径即可，路径格式为
 *
 * /$groupId[0]/../${groupId[n]/$artifactId/$version/$artifactId-$version.$extension
 *
 *
 *
 *
 *
 * build.gradle里dependencies标签页的实现原理
 *
 * https://cloud.tencent.com/developer/article/1651233
 *
 *
 */
task printDependencyUrl() {
    doFirst {
        project.configurations.implementation.dependencies.each {
            dependency ->
//                println(dependency)
                /**
                 * dependency = null ---> local jar file
                 */

                def found = false
                def targetUrl = ""

                if(dependency.group){
                    for (ArtifactRepository repository : project.repositories.asList()) {
                        def url = repository.properties.get('url')
                        /**
                         * pick out remote repo
                         */
                        if(url && url.toString().contains("http")){

                            /**
                             *  this rule might not applicable for certain dependencies  (for example android sdk dependencies)
                             */
                            def jarUrl = String.format("%s%s/%s/%s/%s-%s.jar", url.toString(),
                                    dependency.group.replace('.', '/'), dependency.name, dependency.version,
                                    dependency.name, dependency.version)
//                            println jarUrl
                            try {
                                def jarfile = new URL(jarUrl)
                                def inStream = jarfile.openStream()
                                if (inStream != null) {
                                    found = true
                                    targetUrl = jarUrl
                                }
                            } catch (Exception ignored) {
                            }
                        }
                    }
                }

                if(found) {
                    println(String.format("%s:%s:%s", dependency.group, dependency.name, dependency.version)
                            + " -> " + targetUrl)
                } else {
                    println(String.format("%s:%s:%s", dependency.group, dependency.name, dependency.version)
                            + " -> not found " )
                }
        }
    }
}


//project.getGradle().addListener(new DependencyResolutionListener() {
//    @Override
//    void beforeResolve(ResolvableDependencies dependencies) {
//        //此回调会多次进入，我们只需要解析一次，因此只要进入，就remove，然后执行我们的解析操作
//        project.gradle.removeListener(this)
//        project.getRepositories().each {def repository ->
//            //repository.url就是maven服务的前缀路径，可能是文件协议，也可能是http协议，或是其他协议，如ftp
//            println "beforeResolve -------——>   reponame:" + repository.getName() + "  url:" + repository.properties.get('url')
//        }
//    }
//    @Override
//    void afterResolve(ResolvableDependencies resolvableDependencies) {
//    }
//})




task getAllConfigs() {
    doFirst {
        project.configurations.each {
            config -> println(config.name+"  dep:"+config.dependencies)
        }
    }
}
