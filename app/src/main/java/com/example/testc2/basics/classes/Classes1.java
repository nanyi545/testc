package com.example.testc2.basics.classes;


/**
 *
 *
 * c1:程序运行时，内存到底是如何进行分配的？
 *
 * https://kaiwu.lagou.com/course/courseInfo.htm?sid=&courseId=67&lagoufrom=noapp&sharetype=copy#/detail/pc?id=1855
 *
 *
 *
 * JVM 中的内存可以划分为若干个不同的数据区域，主要分为：
     程序计数器、虚拟机栈、本地方法栈、堆、方法区。
 *
 *1.1 程序计数器（Program Counter Register）
 * Java 程序是多线程的，CPU 可以在多个线程中分配执行时间片段。当某一个线程被 CPU 挂起时，需要记录代码已经执行到的位置，方便 CPU 重新执行此线程时，知道从哪行指令开始执行。这就是程序计数器的作用。
 *
 * “程序计数器”是虚拟机中一块较小的内存空间，主要用于记录当前线程执行的位置。
 *
 *
 *
 * 1.2 虚拟机栈
 *
 * 虚拟机栈也是线程私有的，与线程的生命周期同步。在 Java 虚拟机规范中，对这个区域规定了两种异常状况：
 *
 *
 * 栈帧
 *
 * 栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行的数据结构，每一个线程在执行某个方法时，都会为这个方法创建一个栈帧。
 *
 * 我们可以这样理解：一个线程包含多个栈帧，而每个栈帧内部包含局部变量表、操作数栈、动态连接、返回地址等。如下图所示：
 *
 *
 *
 *
 * 1.5 方法区
 *
 * 方法区（Method Area）也是 JVM 规范里规定的一块运行时数据区。方法区主要是存储已经被 JVM 加载的类信息（版本、字段、方法、接口）、常量、静态变量、即时编译器编译后的代码和数据。该区域同堆一样，也是被各个线程共享的内存区域。
 *
 *
 *
 * ***
 * JVM 内存中只有堆和方法区是线程共享的数据区域，其它区域都是线程私有的。并且程序计数器是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。
 *
 */
public class Classes1 {

}
