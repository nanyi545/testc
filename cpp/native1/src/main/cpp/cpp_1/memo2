

----------------------------------------------------------------------
https://www.cplusplus.com/doc/tutorial/
https://www.cplusplus.com/doc/tutorial/constants/

----------------------------------------------------------------------


https://stackoverflow.com/questions/44347902/is-it-good-practice-to-use-multiple-namespace-in-same-c-source-file

It's actually best practice not to import the entire namespace into your program because it pollutes your namespace.
 This can lead to naming collisions. It's best to import only what you are using.

So instead of:
using namespace z3;

You should do:
using z3::context;


----------------------------------------------------------------------

https://www.cplusplus.com/doc/tutorial/variables/


In C++, there are three ways to initialize variables.

* The first one, known as c-like initialization
int x = 0;

* A second method, known as constructor initialization (introduced by the C++ language), encloses the initial value between parentheses (()):
type identifier (initial_value);
For example:
int x (0);

* Finally, a third method, known as uniform initialization, similar to the above, but using curly braces ({}) instead of parentheses
(this was introduced by the revision of the C++ standard, in 2011):
type identifier {initial_value};
For example:
int x {0};


***** error: expected ';' at end of declaration
https://stackoverflow.com/questions/27924050/expected-at-end-of-declaration-vector-c

g++ assumes C++03 by default, and the syntax you're trying to use came in C++11. Change the compilation line to:
$ g++ -std=c++11 -o test test.cpp
$ g++ -Wall -Werror -pedantic -std=c++1y -o test test.cpp

 g++ b1.cpp -o b1
 g++ -std=c++11 -o b1 b1.cpp




*****
https://www.rapidtables.com/code/linux/gcc/gcc-wall.html


gcc -Wall enables all compiler's warning messages. This option should always be used, in order to generate better code.

https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
-Werror
Make all warnings into errors.

-Wpedantic
-pedantic
Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions,
and some other programs that do not follow ISO C and ISO C++. For ISO C, follows the version of the
ISO C standard specified by any -std option used.



----------------------------------------------------------------------

Type deduction: auto and decltype
int foo = 0;
auto bar = foo;  // the same as: int bar = foo;


Variables that are not initialized can also make use of type deduction with the decltype specifier:
int foo = 0;
decltype(foo) bar;  // the same as: int bar;


 type deduction features they introduce are meant to be used either when the type cannot be obtained by other means or
 when using it improves code readability.

----------------------------------------------------------------------
#include <string>


  string mystring;
  mystring = "This is a string";

As you can see in the previous example, strings can be initialized with any valid string literal, just like numerical type variables can be initialized to any valid numerical literal. As with fundamental types, all initialization formats are valid with strings:

string mystring = "This is a string";
string mystring ("This is a string");
string mystring {"This is a string"};

----------------------------------------------------------------------

Preprocessor definitions (#define)
Another mechanism to name constant values is the use of preprocessor definitions. They have the following form:

#define identifier replacement

----------------------------------------------------------------------
Other literals

Three keyword literals exist in C++: true, false and nullptr:
true and false are the two possible values for variables of type bool.
nullptr is the null pointer value.

bool foo = true;
bool bar = false;
int* p = nullptr;

----------------------------------------------------------------------




----------------------------------------------------------------------

----------------------------------------------------------------------