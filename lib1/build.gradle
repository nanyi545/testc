if (rootProject.ext.apkMode) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'maven'  //要想发布到Maven，此插件必须使用
apply plugin: 'com.dorongold.task-tree'




def group = 'com.example.lib1' //组
def version = '1.0.0' //版本
def artifactId = 'exampleLib1' //唯一标示


//将插件打包上传到本地maven仓库
uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = group
            pom.artifactId = artifactId
            pom.version = version
            //指定本地maven的路径，在项目根目录下
            //  ....../TestC2/repos/com/hehe/gplugin1/myGradlePlugin1/1.0.0
            repository(url: uri('../repos'))
        }
    }
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"


    defaultConfig {

        if (rootProject.ext.apkMode) {
            applicationId group
        } else {
        }

        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        /**
         *
         * https://developer.android.com/studio/projects/android-library
         * *
         * By embedding a ProGuard file in your library module, you ensure that app modules that depend on your library do not have
         * to manually update their ProGuard files to use your library. When the Android Studio build system builds your app, it uses
         * the directives from both the app module and the library. So, there's no need to run a code shrinker on the library in a
         * separate step.
         *
         * To add the ProGuard rules to your library project, you must specify the file's name with consumerProguardFiles property,
         *
         */
    }


    sourceSets {
        main {
            if (rootProject.ext.apkMode) {
                manifest.srcFile "src/main/AndroidManifest-apk.xml"
            } else {
                manifest.srcFile "src/main/AndroidManifest.xml"
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // test ...
    /**
     * implementation 'com.android.support:recyclerview-v7:24.2.1'    ---> below will not include support recyclerview
     *
     *
     * this auto include androidx?  due to below setting in gradle.properties
     *
     * android.useAndroidX=true
     * # Automatically convert third-party libraries to use AndroidX
     * android.enableJetifier=true
     *
     */
    implementation 'com.android.support:recyclerview-v7:24.2.1'


//    implementation 'com.iqiyi.xcrash:xcrash-android-lib:3.0.0'
    /**
     *
     * 故意输错 ---> build ---> 可看下载url
     *
     *      Searched in the following locations:
     *        - https://dl.google.com/dl/android/maven2/com/iqiyi/xcrash/xcrash-android-lib/3.0.0/xcrash-android-lib-3.0.0.pom
     *        - https://dl.google.com/dl/android/maven2/com/iqiyi/xcrash/xcrash-android-lib/3.0.0/xcrash-android-lib-3.0.0.jar
     *        - https://jcenter.bintray.com/com/iqiyi/xcrash/xcrash-android-lib/3.0.0/xcrash-android-lib-3.0.0.pom
     *        - https://jcenter.bintray.com/com/iqiyi/xcrash/xcrash-android-lib/3.0.0/xcrash-android-lib-3.0.0.jar
     *
     */

}


/**
 *
 *
 *
 *

 https://stackoverflow.com/questions/10422054/is-there-a-way-to-list-task-dependencies-in-gradle
 View tasks


 ------1------

 ./gradlew tasks --all
 ./gradlew tasks --all >tasks.txt
 ./gradlew :lib1:tasks --all >tasks.txt     //  lib1 only



 ------2------
 for this you can use --dry-run (or -m) option which lists tasks which are executed in order for particular command, but does not execute the command, e.g.

 ./gradlew assemble --dry-run
 ./gradlew :lib1:assemble --dry-run


 ------3------

 You can try com.dorongold.task-tree plugin with simple usage:

 https://plugins.gradle.org/plugin/com.dorongold.task-tree



 gradle <task 1>...<task N> taskTree


 ./gradlew :lib1:assemble taskTree
 ./gradlew :lib1:assemble taskTree --no-repeat
 ./gradlew :lib1:assemble taskTree >tasks-tree.txt
 ./gradlew :lib1:assemble taskTree --no-repeat >tasks-tree.txt
 ./gradlew :app:assemble taskTree --no-repeat >tasks-tree.txt


 ubuntu: java home : /media/ww/diskd/linux_as3d6/android-studio-ide-192.6200805-linux/android-studio/jre


 **/




task viewAllTAsks() {
    doLast {
        println "------list of tasks----"
        tasks.all {
            task-> println task
        }
    }
}


/ **
*

view task dep 


classes to jar : 

build\/intermediates\/javac\/debug\/classes\/com\/example\/lib1\/ui\/DummyMainActivity.class
build\/intermediates\/javac\/debug\/classes\/com\/example\/lib1\/Test1InLib1.class


:lib1:transformClassesAndResourcesWithSyncLibJarsForDebug 
--->
mac:    build\/intermediates\/packaged-classes\/debug\/classes.jar
ubuntu: 

:lib1:transformClassesAndResourcesWithSyncLibJarsForRelease
---> 
mac:    build\/intermediates\/packaged-classes\/release\/classes.jar
ubuntu: 


*
 **/


/**
 *  demo of remove DummyMainActivity.class ....
 */
//gradle.taskGraph.whenReady {taskGraph ->
//    println "Found task graph: " + taskGraph
//    println "Found " + taskGraph.allTasks.size() + " tasks."
//    taskGraph.allTasks.forEach { task ->
//
//        if(task.name.contains("transformClassesAndResourcesWithSyncLibJarsForDebug")
//        ||task.name.contains("transformClassesAndResourcesWithSyncLibJarsForRelease")
//        ){
//
//            /**
//             * remove classes
//             */
//            task.doFirst {
//                println "  ******* doFirst "
//                inputs.getFiles().getFiles().each {
//                    f ->
//                        if(f.getName().contains("DummyMainActivity")){
//                            f.delete()
//                            println " ----------delete "+f
//                        }
//                }
//            }
//            task.doLast {
//            }
//        }
//
//        println "  ----  view task of ---- " + task
//        println "input  :"+task.inputs.getFiles().getFiles()
//        println "out  :"+task.outputs.getFiles().getFiles()
//        task.dependsOn.forEach { dep ->
//            println "  ---- " + dep
//        }
//        println "  --------------- "
//        println ""
//        println ""
//        println ""
//    }
//}




/**
 *  demo of replacing DummyMainActivity.class ....
 */

//gradle.taskGraph.whenReady {taskGraph ->
//    taskGraph.allTasks.forEach { task ->
//
//        if(task.name.contains("transformClassesAndResourcesWithSyncLibJarsForDebug")
//                ||task.name.contains("transformClassesAndResourcesWithSyncLibJarsForRelease")
//        ){
//            task.doFirst {
//                println "  ******* doFirst *********  build path:" + project.getBuildDir().getAbsolutePath()
//                File toReplaceClass = new File(project.getBuildDir().getAbsolutePath(),"DummyMainActivity.class")
//
//                /**
//                 * replace DummyMainActivity.class
//                 */
//                if ( toReplaceClass.exists() ){
//                    inputs.getFiles().getFiles().each {
//                        f ->
//                            if(f.getName().contains("DummyMainActivity")){
//                                String fpath = f.getAbsolutePath()
//
//                                // delete the original class file
//                                f.delete()
//
//                                // copy the class file to replace the original file
//                                new File(fpath).bytes = toReplaceClass.bytes
//                            }
//                    }
//                }
//            }
//        }
//
//    }
//}

